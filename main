#!/usr/bin/env bash

# Fix problems of directories
here=`dirname "$0"`
cd "$here"
# Banner
printf "\033[31m"
cat << "EOF"
	               /\ o 
	        o     /_ /~/
	         \      /\/
	          \    /   
	           \  / 
                .{{}}}}}}.
               {{{{{}}}}}}}.
              {{{{    {}{{}}}}
             }}}}} _   _ {{{{{
             }}}}  a   a  }}}&
            {{{{{    ^    {{{&
           }}}}}}\  .=.  /}}&&&
           {{{{{{{;.___.;}}&&&&
            '{{{{{{)   (}}$$$$&
             `""'"':   :'"'"'`
	 [At Segmentation Fault]
EOF
shopt -s nocasematch
printf "\033[0m"
# Vars
help="""
    D4N155: Tool for smart audit security

    Usage: bash main <option> <target>
    
    Options:
    	-h, --help			Show this mensage.
    	-w, --wordlist			Make the smartwordlist based in informations
					on website.
	-t, --targets=source.txt	Make the smartwordlist based in your passed
					source informations in urls. 
					{{{{FEATURE IN TEST}}}}
	-v, --vulners			Get urls that can cause attacks.
	-a, --all			Make all features.

     Target: <url> or <ip>

     It's GNU/GPL version 3
     Project page: https://github.com/Jul10l1r4/D4N155"""
# Functions
#
#

__vul(){
	# Check arguments
	if [ "$1" ]
	then
		echo "Attacking $1"
		target="$1"
	else
		printf "Target is: $1"; read target
	fi

	# Update db
	echo -e "\033[33mYou want update the list Google hacking? (y/n)\033[32m"
	read typed
	case $typed in
		"Yes" | y*)
			echo "Updating database"
			echo "`python3 pagodo/ghdb_scraper.py`"
		;;
		"No" | n*)
			echo "OK ..."
		;;
	esac

	# Make the attack
	echo -e "\033[33mBenning attack using diferents user agents ;)\033[32m"
	cd pagodo/
	echo "It will to delay..."
	# It's good? Then go go go go
	python3 pagodo.py -d $target -g google_dorks.txt -l 40 -s -e 1
	if [ "$?" = "0" ]
	then
		mv $target.txt ../reports/ &&
			echo "Finalized attack to $target, see in reports/$target.txt" || 
			echo -e "\033[31mThe file dont has been saved\033[32m"
	else
		echo -e "Error: in \033[31mpagodo.py\033[33m\nrun: pip3 install -r requirements.txt\033[32m"
	fi
	cd ../
}

__wordlist(){
	# Check arguments
	if [ "$1" ]
	then
		echo "Attacking $1"
		target="$1"
	else
		printf "Target is: $1"; read target
	fi

	# Make the attack
	echo -e "\033[33mBenning attack, with Google indexations\033[32m"
	cd pagodo/
	# It's good? Then go go go go
	python3 pagodo.py -d $target -g blank.txt -l 300 -s -e 1
	if [ "$?" = "0" ]
	then
		# Check if exists directory
		test -d ../reports/db &&
			echo -e "reports/db\t...\t\033[34mok\033[32m" ||
			mkdir ../reports/db
		# Check if be ok
		mv "$target.txt" "../reports/db/" &&
			echo -e "Finalized search to $target, database\nhas been saved in reports/db/$target.txt" || 
			echo -e "\033[31mThe file dont has been saved\033[32m"
		# Generate the wordlist
		#	get all urls and read all text
		#	Check for equals worlds and remove
		#	remove characters like: , or ?
		echo "Make the wordlist *-*"
		cat ../reports/db/$target.txt | \
			while read url
			do
				echo "$url";
				python3 ../objetive/objetive.py "$url" -t -txt -a >> ../reports/db/$target.blob.txt
			done && \
				\
			python3 ../modules/generator.py "$(cat ../reports/db/$target.blob.txt)" \
				> ../reports/wordlist/$target.wordlist.txt || \
				echo -e "\033[031mError fatal\033[32m"

			echo -e "\033[032mWordlist has been saved in\n\033[033m$here/reports/wordlist/$target.wordlist.txt\033[0m"
			# clear trash files
			rm -rf ../reports/db/$target*
			exit 0
	else
		echo -e "Error: in \033[31mpagodo.py\033[33m\nrun: pip3 install -r requirements.txt\033[32m"
	fi
	cd ../
}

#	Menu
if [ ! "$1" ]
then
	printf "\033[32m"
	PS3="D4N155%#~> "
	select option in "Find vulnerabilities" "Make wordlist"
	do
		case $option in
			"Find vulnerabilities")
				__vul
				;;
			"Make wordlist")
				__wordlist
				;;
			*) echo -e "\033[31mRFTM\033[0m";exit ;;
		esac
	done
	printf "\033[0m"
else
	case "$1" in
	        --h* | "-h")
			echo "$help"
			exit 0
			;;
		--w* | "-w")
			echo "Make the smart wordlist"
			__wordlist "$2" && \
			exit 0 || \
			exit 1
			;;
#		--t* | "-t")
#			echo "Targets"
#			__targets "$2" && \
#			exit 0 || \
#			exit 1
#			;;
		--v* | "-v")
			echo "Find to vulnerabilties"
			__vul "$2" && \
			exit 0 || \
			exit 1
			;;
		--a* | "-a")
			echo "full" && \
			exit 0 || \
			exit 1
			;;
	esac
fi
