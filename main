#!/usr/bin/env bash

# Fix problems of directories
here=`dirname "$0"`
cd "$here"

# colors art
green='\e[32m'
bgred='\e[41m'
red='\e[31m'
# Banner
echo -e """
$red	               /\ o 
	        o     /_ /~/
	         \      /\/
	          \    /   
	           \  / 
                .{{}}}}}}.
               {{{{{}}}}}}}.
              {{{{    {}{{}}}}
             }}}}} _   _ {{{{{
             }}}}  a   a  }}}&
            {{{{{    ^    {{{&
           }}}}}}\  .=.  /}}&&&
           {{{{{{{;.___.;}}&&&&
            '{{{{{{)   (}}|//&
             ´''''':   :''''´
	[ \e[5m$bgred\033[38;5;232mAt Segmentation Fault\e[m $red]
"""

# ignore lower and uppercase
shopt -s nocasematch
# and colors with dont fuck terminal
printf "\033[0m"
# Vars
help="""
    D4N155: Tool for smart audit security

    Usage: bash main <option> <value>
    All options are optionals

    Options:
    	-w, --wordlist	<url|ip>	Make the smartwordlist based in informations
					on website.
	-v, --vulners	<url|ip>	Get urls that can cause attacks.
	-t, --targets	<source>  	Make the smart-wordlist based in your passed
					source informations in urls.
	-b, --based	<file>		Analyze texts to generate the
		                        custom wordlist
	-o, --output	<file>		For to store the all wordlist.
    	-h, --help			Show this mensage.

     Value: <url | ip | source | file>
     	URL				URL target, example: scanme.nmap.org
	IP				IP address
	SOURCE				Source file, contains the host or ips
	FILE				File, for save the result or using in wordlist

     It's GNU/GPL version 3
     Project page: https://github.com/Jul10l1r4/D4N155"""

# All functions
. modules/functions.sh

#	Menu
if [ ! "$1" ]
then
	printf "\033[32m"
	PS3="D4N155%#~> "
	select option in "Find vulnerabilities" "Make wordlist"
	do
		case $option in
			"Find vulnerabilities")
				__vul
				;;
			"Make wordlist")
				__wordlist
				;;
			*) echo -e "\033[31mRFTM\033[0m";exit ;;
		esac
	done
	printf "\033[0m"
else
	# vars for iterations
	i=1
	x=1
	save=""
	while [ "$i" -le "$#" ]
	do
		# arg: argument
		# narg: next arg.
		# parg: primary arg.
		# pvarg: primary value of arg.

		eval "arg=\${$i}"
		eval "narg=\${$(($i+1))}"
		
		# The block of code are for arguments
		# like "-o, --output", for get the arg.
		# when will be used.

		while [ "$x" -le "$#" ]
		do
			# para: parameter
			# dest: destination
			eval "para=\${$x}"
			eval "dest=\${$(($x+1))}"

			case "$para" in
				--o* | "-o")
					# export the file for storaged
					export save="$dest" 
					;;
			esac
			# For work in loop
			x=$(($x+1))
		done

		case "$arg" in
		        --h* | "-h")
				echo "$help"
				exit 0
				;;&
			--w* | -*w*)
				echo "Make the smart wordlist"
				if [[ $narg =~ ^- ]]
				then
					test "$save" == "" && \
					       __wordlist || \
					       __wordlist "" "$save"
				else
					test "$save" == "" && \
					       __wordlist "$narg" || \
					       __wordlist "$narg" "$save"
				fi
				;;&
			--v* | -*v*)
        # Exists $narg? Then ok,  go go
				echo "Find to vulnerabilties"
			  [ -e "$narg" ] && __vul "$narg" || ( echo "→ bash main --help";exit 2 )
				;;&
      --b* | -*b*)
        echo "Make custom wordlist"
        __cus "$narg"
        ;;&
			--t* | "-t")
				echo -e "Targets inputed in \e[33m$narg\e[32m"
				__fwordlist "$narg"
				;;

		esac
		i=$(($i+1))
	done
fi
