#!/usr/bin/env bash

# Fix problems of directories
here=`dirname "$0"`
cd "$here"

# colors art
green='\e[32m'
bgred='\e[41m'
red='\e[31m'
# Banner
echo -e """
$red	               /\ o 
	        o     /_ /~/
	         \      /\/
	          \    /   
	           \  / 
                .{{}}}}}}.
               {{{{{}}}}}}}.
              {{{{    {}{{}}}}
             }}}}} _   _ {{{{{
             }}}}  a   a  }}}&
            {{{{{    ^    {{{&
           }}}}}}\  .=.  /}}&&&
           {{{{{{{;.___.;}}&&&&
            '{{{{{{)   (}}|//&
             ´''''':   :''''´
	[ \e[5m$bgred\033[38;5;232mAt Segmentation Fault\e[m $red]
"""

# ignore lower and uppercase
shopt -s nocasematch
# and colors with dont fuck terminal
printf "\033[0m"
# Vars
help="""
    D4N155: Tool for smart audit security

    Usage: bash main <option> <target>
    
    Options:
    	-h, --help			Show this mensage.
    	-w, --wordlist			Make the smartwordlist based in informations
					on website.
	-t, --targets <source>  	Make the smart-wordlist based in your passed
					source informations in urls.
	-v, --vulners			Get urls that can cause attacks.

     Target: <url | ip | source>

     It's GNU/GPL version 3
     Project page: https://github.com/Jul10l1r4/D4N155"""

# All functions
. modules/functions.sh

#	Menu
if [ ! "$1" ]
then
	printf "\033[32m"
	PS3="D4N155%#~> "
	select option in "Find vulnerabilities" "Make wordlist"
	do
		case $option in
			"Find vulnerabilities")
				__vul
				;;
			"Make wordlist")
				__wordlist
				;;
			*) echo -e "\033[31mRFTM\033[0m";exit ;;
		esac
	done
	printf "\033[0m"
else
	i=1
	while [ "$i" -le "$#" ];do
		# arg for argument
		# narg means next argument
		eval "arg=\${$i}"
		eval "narg=\${$(($i+1))}"
		case "$arg" in
		        --h* | "-h")
				echo "$help"
				exit 0
				;;&
			--w* | -*w*)
				echo "Make the smart wordlist"
				__wordlist "$narg" #&& \
#				exit 0 || \
#				exit 1
				;;&
			--t* | "-t")
				echo "Targets"
				__fwordlist "$narg" #&& \
#				exit 0 || \
#				exit 1
				;;&
			--v* | -*v*)
				echo "Find to vulnerabilties"
				__vul "$narg" #&& \
#				exit 0 || \
#				exit 1
				;;
		esac
		i=$(($i+1))
	done
fi
